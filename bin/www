var debug = require('debug')('lfger-backend:server');
var WORKERS = process.env.CONCURRENT_WORKERS;
var throng = require('throng');

var start = function() {
  var app = require('../app/app');
  var port = normalizePort(process.env.PORT || '3000');

  app.set('port', port);
  app.on('error', onError);
  app.listen(port, onListening);

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }


    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(port + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(port + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    if (process.env.ENVIRONMENT === 'development') {
      debug('Listening on ' + port);
    }
  }

};

module.exports = throng(start, {
  workers: WORKERS,
  lifetime: Infinity
});
